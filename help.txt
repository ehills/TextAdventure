Team: Samuel Garner, Stephen Herd, George Phillips and Edward Hills.

This is a user guide for our adaptation of BIFF. 
We have ensured no verbs are hardcoded to give the user more control over their game. Check out the game example at the end to see how everything works.

Differences to BIFF

gameName = "game_name";  lets a user specify a game's name to be presented at the start of each game. Set to an empty string by default.
credits = "credits_go_here"; lets a user specify a game's credits to be presented after the game name. Set to an empty string by default.

Synonyms
We have implemented synonyms differently to BIFF. All the user needs to do when they initialise a new verb is to use "or" to write as many synonyms as they want.
Example: Verb = "go or climb or enter" {rules_go_here}  

Attributes
Item attributes are initialised the same as in BIFF but we saw no reason to set global attributes as they are set to false by default. 
	
Game Library

gameName - sets a games name.
credits - sets a games credits.
initialLocation - sets starting location for game.
InitialDescription - sets the game's intoduction.
inputItem - gets the item to be used for item default verbs. 
print - prints out specified information to game player.
describe - prints out the current location's name and description.
describeInventory - prints out the players inventory.
gameOver - quits the game.
list - prints out the items in the current location.
setDescription - sets the description of an item or location.
getDescription - gets the description of an item or location.
hasItem - checks to see if a location has an item. Good to use to check inventory.
setLocation - sets an item to a location or to the player.
inLocation - checks to see if player or item is in a certain location.
hasAttribute - checks to see if an item has a certain attribute.
setAttribute - sets an item's attribute to true or false.
canCarry - checks to see if there's room in your inventory.
hasNorth - checks to see if a location has a location to it's north.
hasSouth - checks to see if a location has a location to it's south.
hasEast - checks to see if a location has a location to it's east.
hasWest - checks to see if a location has a location to it's west.
toNorth - used with setLocation to move player north of current location.
toSouth - used with setLocation to move the player south of current location.
toEast - used with setLocation to move the player east of current location.
toWest - used with setLocation to move the player west of current location.

Game objects

Creates the player in the game.
Player player_name {
	name = "name_goes_here";
	description = "description_goes_here";
	carryLimit = carryLimit_goes_here; as an integer.
}

Creates a location in the game.
Location location_name (This needs to be unique) {
    	name = "name_goes_here";
    	description = "description_goes_here.";
	north, south, east and west are set to NULL by default.
	west = location_goes_here;  
    	east = location_goes_here;
    	south = location_goes_here;
	north = location_goes_here;
}

Creates an item in the game.
Item item_name (This needs to be unique) {
	name = "name_goes_here"; (The name of the item in game)
	(Be careful not to have items with the same name in the same location)
	description = "description_goes_here";
	location = location_name;
	hasAttributes = attribute's_names_go_here;

An item's verbs go here in the item object.
 	Verb  = “enter or go or climb”{rules_go_here}
}

Default verbs

Location defaults used to create single verb defaults.
LocationDefaults {
	Verb = "i or inventory or inv" {rules_go_here}
	Verb = "s or sth" {rules_go_here}
}

Item defaults used to create verb noun defaults.
ItemDefaults { 
	Verb "examine or x or look" {rules_go_here}
}	
	

Game Example 

gameName = "*****The Haunted Mansion*****";
credits = "By Edward Hills, George Phillips, Samuel Garner and Stephen Herd";

Player andy  {
    name =  "Andy";
    description = "An amateur ghost hunter.";
    carryLimit = 4;
}

ItemDefaults {
    Verb "examine or x or ex or look or l" {
        print inputItem getDescription;
    }
    
	Verb "pickup or pick-up or get" {
		if (inputItem hasAttribute canPickup) {
			 if (andy hasItem inputItem) {
	            print "You already have the ";
	            print inputItem;
	        } else {
	            if (andy canCarry) {
	                inputItem setLocation andy;
					print "You pickup the ";
					print inputItem;
	            } else {
	                print "You are carrying too much already.";
                }
            }
        } else {
        	print "You cannont pick up the ";
        	print inputItem;
        	print ", what were you thinking...";
        }
    }

    Verb "drop or discard or throwout or throw-out" {
        if (andy hasItem inputItem) {
            inputItem setLocation currentLocation;
			print "You drop the ";
			print inputItem;
        } else {
            print "You don't have ";
            print inputItem;
        }
    }
}

LocationDefaults {
	Verb "i or inventory or invent or inv" {
		describeInventory;
	}
    Verb "look or l" {
		 if(andy inLocation tortureRoom) {
            print "You look into the face of death and feel the scythe rip through your body. You flop over in agony and slowly die with the last thing you hear being the spectre cackling at your misfortune...";
			gameOver;
		} else {
			describe;
			list;	
		}
    }
    Verb "quit or q" {
    	print "Bye bye thanks for playing!!!";
    	gameOver;
    }   
    // Directions
    Verb "north or n or nth" {
    	if(andy inLocation hasNorth) {
    		andy setLocation toNorth;
    		describe;
			list;
    	} else {
    		print "You cannot go north.";
    	}
    }
    Verb "south or s or sth" {
    	if(andy inLocation tortureRoom) {
    		print "As you turn to flee you hear a bone-chilling cackling behind you as the apparation swings his scythe. Before you can react you feel a sickening pain in your neck. You have been decapitated, your head rolls and your body crumples to the ground. You are dead.";
    		gameOver;
    	}
    	if(andy inLocation hasSouth) {
    		andy setLocation toSouth;
    		describe;
			list;
    	} else {
    		print "You cannot go south.";
    	}
    }
    Verb "east or e" {
    	if(andy inLocation hasEast) {
    		andy setLocation toEast;
    		describe;
			list;
    	} else {
    		print "You cannot go east.";
    	}
    }
    Verb "west or w" {
    	if(andy inLocation hasWest) {
    		andy setLocation toWest;
    		describe;
			list;
    	} else {
    		print "You cannot go west.";
    	}
    }
}

initialLocation = garden;

initialDescription = "Your name is Andy an amateur ghost hunter. You have arrived at your first job armed only with your trusty wrench. Infront of you is an old mansion said to be haunted by an evil presence. This is the perfect place to hone your ghost busting skills.";

// Location to temporarily store game items not in use
Location deadSpace {
	name = "Dead space";
	description = "Dead space";
}

Location garden {
    name = "The overgrown garden";
    description = "You are in an overgrown garden in front of the mansion. The front door has been bolted shut by locals but you notice a window near by that you might be able to squeeze through.";
}

Location entranceHall {
    name = "The entrance hall";
    description = "You enter a dimly lit hall illuminated only by the faint moonlight filtering through the dusty windows. You are surrounded in darkness, but can make out doorways to the east and west. South leads out the window to the overgrown garden.";

    west = masterBedroom;
    east = diningRoom;
    south = garden;
}

Location diningRoom {
    name = "The dining room";
    description = "You find yourself in an old dining room, complete with ornate chandeliers.";
 	west = entranceHall;
}

Location masterBedroom {
    name = "The master bedroom";
    description = "You are surrounded in complete darkness. You cannot see anything but can hear strange noises close by. A cold chill rushes over you.";
    east = entranceHall;
}

Location secretHall {
    name = "The secret hall";
    description = "A long narrow hallway extends out in front of you, you see a door at end of the hall which you feel a dark forbidding presence radiating from.";

    south = entranceHall;
}

Location tortureRoom {
    name = "The torture room";
    description = "You enter a cold stone room and instantly feel dred. There are rotting corpses sprawled out around you eminating a foul stench. An apparition materializes in front of you wielding a menacing scythe. You have finally reached your destination.";

    south = secretHall;
}

Item lamp {
    name = "lamp";
    description = "An old lamp but still looks like it might work.";
    location = diningRoom;
    hasAttributes = canPickup;

    Verb "light or use or turn-on or turnon" {
		if(lamp inLocation andy) {
			entranceHall setDescription "With the aid of the lamp you can now make out a doorway to the north. The other exits are doorways to the east and west and the window leading south.";
			entranceHall setNorth secretHall;
			masterBedroom setDescription "With the lamp illuminating your surroundings you find yourself in a creepy old bedroom decorated with many mirrors. You keep seeing things move in them out of the corner of your eye. There is also a massive bed taking up most of the room. You can see many things glinting under it.";
			mirror setLocation masterBedroom;
			bed setLocation masterBedroom;
			print "You fiddle around with the old lamp and manage to turn it on.";
		} else {
			print "You don't have that item.";
		}
    }
	
	Verb "off or turnoff or turn-off" {
		if(lamp inLocation andy) {
			entranceHall setDescription "You enter a dimly lit hall illuminated only by the faint moonlight filtering through the dusty windows. You are sourrounded in darkness, but can make out doorways to the east and west. South leads out the window to the overgrown garden.";
			entranceHall removeNorth;
			masterBedroom setDescription "You are surrounded in darkness. You cannot see anything but can hear strange noises close by. A cold chill rushes over you.";
			print "You switch off the old lamp.";
		} else {
			print "You don't have that item.";
		}
    }
}

Item mirror {
    name = "mirror";
    description = "You see your handsome, confident reflection in the mirror. This mirror could be useful.";
    location = deadSpace;
    hasAttributes = canPickup;

    Verb = "use or lookat or look-at" {
        if(andy inLocation tortureRoom) {
            print "You pull out out the mirror, the ghost upon seeing it's horrific reflection flees in terror. Congratulations you have busted your first ghost!";
            gameOver;
        } else {
            print "You admire yourself in the mirror.";
        }
    }
}

Item door {
	name = "door";
	description = "A solid wooden door is located in the north wall. You notice a small key hole.";
	location = secretHall;
	hasAttributes = isLocked !isOpen;
	
	Verb = "open" {
		if(door hasAttribute !isOpen) {
			if (door hasAttribute isLocked) {
			print "You cannot open the door it is locked.";
			} else {
				door setAttribute isOpen;
				secretHall setNorth tortureRoom;
				print "The door swings open.";
			}
		} else {
			print "The door is already open";
		}
	}
	Verb = "unlock" {
		if(key inLocation andy) {
			if (door hasAttribute isLocked) {
				door setAttribute !isLocked;
				print "You struggle to turn the key in the old door but manage to unlock it.";
			} else {
				print "The door is already unlocked.";
			}
		} else {
				print "You do not have a key to unlock the door.";
		}
	}
}

Item key {
	name = "key";
	description = "a small key";
	location = deadSpace;
	hasAttributes = canPickup;
	
	Verb = "use" {
		if(door hasAttribute isLocked) {
			if(andy inLocation secretHall) {
				print "You struggle to turn the key in the old door but manage to unlock it.";
				secretHall setNorth tortureRoom;
				door setAttribute !isLocked;
			} else {
				print "You can't use the key here.";
			}
		} else {
				print "The door is already unlocked.";
		}
	}
}

Item bed {
	name = "bed";
	description = "A massive dusty bed.";
	location = deadSpace;
	
	Verb = "under or look or examine or x or ex" {
		if (key inLocation andy) {
			print "A massive dusty bed.";
		} else {
			print "You see a key glinting under the bed.";
			key setLocation masterBedroom;	
		}
	}
	
	Verb = "sleep or nap" {
		print "You lay down on the bed. As your eyes close you feel something lay down beside you. Your eyes flicker open but there's nobody there. You decide this is not a good place to take a nap.";
		}
}

Item box {
	name = "box";
	description = "A large wooden box";
	location = secretHall;
	hasAttributes = !isOpen;
	
	Verb = "open" { 
		if (box hasAttribute isOpen) {
			print "The box is already open...";
		} else {
			skull setLocation secretHall;
			box setAttribute isOpen;
			print "You open the box and discover a human skull... the body is nowhere to been seen.";
		}
	}
}

Item skull {
	name = "skull";
	description = "A cracked human skull";
	location = deadSpace;
	hasAttributes = canPickup;
	
	Verb = "wear" {
		if (skull inLocation andy) {
			print "For some perverse reason you shove the skull onto your head... Your body starts to decay and rot away, before you know it you have provided this skull with a new skeleton.";
			gameOver;
		} else {
			print "You don't have the skull in your inventory.";
		}
	}
	
	Verb = "use or show" {
		if (skull inLocation andy) {
			if(andy inLocation tortureRoom) {
				print "The skull begins to contort and grow, before long the skull has morphed into an angry looking ghost of a man. It lets out a blood curdling cry and lashes out at the apparation. The evil apparation disapates and dies... again. The man ghost turns and knods his thanks to you and vanishes. You have won congradulations!";
				gameOver;
			} else {
				print "You wave the skull around like a demented lunatic.";
			}
			} else {
				print "You don't have that item.";
			}
		}
	}
}

Item window {
	name = "window";
	description = "An old cracked window it seems to be your only access to the mansion.";
	location = garden;
	hasAttributes = !isOpen isJammed;
	
	Verb "open" {
		if (window hasAttribute !isOpen) {
			if (window hasAttribute isJammed) {
				print "You cannot open the window it is jammed.";
			} else {
				window setAttribute isOpen;
				garden setNorth entranceHall;
				print "With a heave the window grates open to leave a nice opening to enter through.";
			}
		} else {
			print "The window is already open.";	
		}
	}

	Verb = "go or climb or enter" {
		if(window hasAttribute isOpen) {
			andy setLocation entranceHall;
			describe;
			list;
		} else {
		  	print "You can't do that the window is closed.";
			
		}
	}
}

Item wrench {
	name = "wrench";
	description = "Your trusty wrench. You've used it to help you out of many a tight jam.";
	location = andy;
	hasAttributes = canPickup;
	
	Verb = "use" {
		if(andy inLocation garden) {
			if(wrench inLocation andy) {
				if(window hasAttribute isJammed) {
					window setAttribute !isJammed;
					print "You manage to pry open the window far enough to get your hands under.";
				} else {
					print "You have already pried loose the window.";
				}
			} else {
				print "You do not have the wrench.";
			}
		} else {
			print "You cannot use the wrench here.";
		}
	}
}

Item mansion_door {
	name = "door";
	description  = "The mansion door is bolted shut. You will need to find another way in.";
	location = garden;
	
	Verb = "open" {
		print "The mansion door is bolted shut. You will need to find another way in.";
	}
}


